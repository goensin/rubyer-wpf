<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:rubyer="clr-namespace:Rubyer">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Rubyer;component/Themes/BaseStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  默认按钮  -->
    <Style x:Key="RubyerButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Primary}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForeground}" />
        <Setter Property="Height" Value="28" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5 0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(rubyer:ButtonHelper.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid>
                            <Border x:Name="effectBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding Path=(rubyer:ButtonHelper.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                    Effect="{StaticResource RightBottomEffect}"
                                    SnapsToDevicePixels="true" />
                            <ContentPresenter x:Name="contentPresenter"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Focusable="False"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="effectBorder" Property="Effect" Value="{StaticResource AllDirectionEffect}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Opacity" Value="{DynamicResource MouseOverOpacity}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Opacity" Value="{DynamicResource PressedOpacity}" />
                            <Setter TargetName="effectBorder" Property="Effect" Value="{x:Null}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Opacity" Value="{DynamicResource UnEnabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="rubyer:ButtonHelper.CornerRadius" Value="2.5" />
    </Style>


    <!--  亮色按钮  -->
    <Style x:Key="LightButton"
           BasedOn="{StaticResource RubyerButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Light}" />
        <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
    </Style>

    <!--  暗色按钮  -->
    <Style x:Key="DarkButton"
           BasedOn="{StaticResource RubyerButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Dark}" />
        <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
    </Style>

    <!--  强调色按钮  -->
    <Style x:Key="AccentButton"
           BasedOn="{StaticResource RubyerButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource AccentForeground}" />
    </Style>

    <!--  文字按钮  -->
    <Style x:Key="TextMidButton"
           BasedOn="{StaticResource RubyerButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Primary}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(rubyer:ButtonHelper.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource ButtonMouseOverBackgroundGray}" />
                            <Setter TargetName="border" Property="Opacity" Value="{DynamicResource MouseOverOpacity}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonMouseOverBackgroundGray}" />
                            <Setter TargetName="border" Property="Opacity" Value="{DynamicResource PressedOpacity}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Opacity" Value="{DynamicResource UnEnabledOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  文字亮色按钮  -->
    <Style x:Key="TextLightButton"
           BasedOn="{StaticResource TextMidButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Light}" />
    </Style>

    <!--  文字暗色按钮  -->
    <Style x:Key="TextDarkButton"
           BasedOn="{StaticResource TextMidButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Dark}" />
    </Style>

    <!--  文字强调色按钮  -->
    <Style x:Key="TextAccentButton"
           BasedOn="{StaticResource TextMidButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Accent}" />
    </Style>

    <!--  圆形按钮  -->
    <Style x:Key="CircleMidButton"
           BasedOn="{StaticResource RubyerButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForeground}" />
        <Setter Property="Height" Value="{Binding Path=(rubyer:ButtonHelper.CircleDima), RelativeSource={RelativeSource Mode=Self}}" />
        <Setter Property="Width" Value="{Binding Path=(rubyer:ButtonHelper.CircleDima), RelativeSource={RelativeSource Mode=Self}}" />
        <Setter Property="rubyer:ButtonHelper.CircleDima" Value="30" />
        <Setter Property="rubyer:ButtonHelper.CornerRadius" Value="{Binding Path=(rubyer:ButtonHelper.CircleDima), RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource halfTheValue}}" />
    </Style>

    <!--  圆形亮色按钮  -->
    <Style x:Key="CircleLightButton"
           BasedOn="{StaticResource CircleMidButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Light}" />
        <Setter Property="Foreground" Value="{DynamicResource LightForeground}" />
    </Style>

    <!--  圆形暗色按钮  -->
    <Style x:Key="CircleDarkButton"
           BasedOn="{StaticResource CircleMidButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Dark}" />
        <Setter Property="Foreground" Value="{DynamicResource DarkForeground}" />
    </Style>

    <!--  圆形强调色按钮  -->
    <Style x:Key="CircleAccentButton"
           BasedOn="{StaticResource CircleMidButton}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource AccentForeground}" />
    </Style>

</ResourceDictionary>