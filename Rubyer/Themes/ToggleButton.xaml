<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:rubyer="clr-namespace:Rubyer"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Rubyer;component/Themes/Resources/Default.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="RubyerToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource Secondary}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource DefaultForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10 5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="rubyer:ControlHelper.CornerRadius" Value="{DynamicResource AllControlCornerRadius}" />
        <Setter Property="rubyer:ControlHelper.MaskOpacity" Value="1" />
        <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Primary}" />
        <Setter Property="rubyer:ControlHelper.MouseOverBrush" Value="{DynamicResource Mask}" />
        <Setter Property="rubyer:ControlHelper.FocusedForegroundBrush" Value="{DynamicResource WhiteForeground}" />
        <Setter Property="rubyer:ToggleButtonHelper.CheckedContent" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding Path=(rubyer:ControlHelper.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid>
                            <rubyer:ControlMask x:Name="mask"
                                                Background="{Binding Path=(rubyer:ControlHelper.FocusedBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                CornerRadius="{Binding Path=(rubyer:ControlHelper.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                IsActive="{TemplateBinding IsChecked}"
                                                MaskOpacity="{Binding Path=(rubyer:ControlHelper.MaskOpacity), RelativeSource={RelativeSource Mode=TemplatedParent}}" />

                            <ContentPresenter x:Name="contentPresenter"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Focusable="False"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{DynamicResource UnenableOpcity}" />
                        </Trigger>
                        <Trigger Property="rubyer:ButtonHelper.Shape" Value="Circle">
                            <Setter Property="Width" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="rubyer:ControlHelper.CornerRadius" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource HalfOfDoubleConverter}}" />
                            <Setter Property="Padding" Value="5" />
                            <Setter Property="VerticalAlignment" Value="Center" />
                        </Trigger>
                        <Trigger Property="rubyer:ButtonHelper.Shape" Value="Round">
                            <Setter Property="rubyer:ControlHelper.CornerRadius" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource HalfOfDoubleConverter}}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{Binding Path=(rubyer:ControlHelper.FocusedForegroundBrush), RelativeSource={RelativeSource Self}}" />
                            <!--<Setter TargetName="border" Property="Background" Value="{Binding Path=(rubyer:ControlHelper.FocusedBrush), RelativeSource={RelativeSource AncestorType=ToggleButton}}" />-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Mask}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Error}" />
                            <Setter Property="BorderThickness" Value="{DynamicResource DefaultBorderThickness}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  亮色  -->
    <Style x:Key="LightToggleButton"
           BasedOn="{StaticResource RubyerToggleButton}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Light}" />
        <Setter Property="rubyer:ControlHelper.FocusedForegroundBrush" Value="{DynamicResource BlackForeground}" />
    </Style>

    <!--  暗色  -->
    <Style x:Key="DarkToggleButton"
           BasedOn="{StaticResource RubyerToggleButton}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Dark}" />
        <Setter Property="rubyer:ControlHelper.FocusedForegroundBrush" Value="{DynamicResource WhiteForeground}" />
    </Style>

    <!--  强调色  -->
    <Style x:Key="AccentToggleButton"
           BasedOn="{StaticResource RubyerToggleButton}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Accent}" />
        <Setter Property="rubyer:ControlHelper.FocusedForegroundBrush" Value="{DynamicResource WhiteForeground}" />
    </Style>

    <!--  切换开关默认  -->
    <Style x:Key="SwitchToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource Border}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource DefaultForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0 0 5 0" />
        <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Primary}" />
        <Setter Property="rubyer:ToggleButtonHelper.CheckedContent" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Grid x:Name="backgroundRoot"
                              Grid.Column="1"
                              Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource MultiplyConverter}, ConverterParameter=2}"
                              Height="{Binding ActualHeight, ElementName=contentPresenter}"
                              Margin="0 0 0 0">
                            <Border x:Name="defaultBorder"
                                    Margin="0 1"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding ActualHeight, Converter={StaticResource HalfOfDoubleConverter}, RelativeSource={RelativeSource Mode=Self}}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <Border x:Name="checkedBorder"
                                    Margin="0 1"
                                    Background="{Binding Path=(rubyer:ControlHelper.FocusedBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding ActualHeight, Converter={StaticResource HalfOfDoubleConverter}, RelativeSource={RelativeSource Mode=Self}}"
                                    Opacity="0"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <Ellipse x:Name="littleBall"
                                     Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}"
                                     HorizontalAlignment="Left"
                                     Effect="{DynamicResource AllDirectionEffect}"
                                     Fill="{DynamicResource WhiteForeground}">
                                <Ellipse.RenderTransform>
                                    <TranslateTransform>
                                        <TranslateTransform.X>
                                            <MultiBinding Converter="{StaticResource MathMultiplyConverter}">
                                                <MultiBinding.Bindings>
                                                    <Binding ElementName="checkedBorder" Path="Opacity" />
                                                    <Binding ElementName="littleBall" Path="ActualWidth" />
                                                </MultiBinding.Bindings>
                                            </MultiBinding>
                                        </TranslateTransform.X>
                                    </TranslateTransform>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Grid>

                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="contentPresenter" Property="Content" Value="{x:Null}">
                            <Setter TargetName="backgroundRoot" Property="Height" Value="Auto" />
                        </Trigger>
                        <Trigger SourceName="backgroundRoot" Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="littleBall"
                                                         Storyboard.TargetProperty="Effect.BlurRadius"
                                                         To="10"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="littleBall"
                                                         Storyboard.TargetProperty="Effect.BlurRadius"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="littleBall"
                                                         Storyboard.TargetProperty="Effect.BlurRadius"
                                                         To="2"
                                                         Duration="0:0:0.15">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="littleBall"
                                                         Storyboard.TargetProperty="Effect.BlurRadius"
                                                         Duration="0:0:0.15">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseIn" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource UnenableOpcity}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <!--<Setter TargetName="littleBall" Property="HorizontalAlignment" Value="Right" />-->
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="checkedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="checkedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  切换开关亮色  -->
    <Style x:Key="SwitchLightToggleButton"
           BasedOn="{StaticResource SwitchToggleButton}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Light}" />
    </Style>

    <!--  切换开关暗色  -->
    <Style x:Key="SwitchDarkToggleButton"
           BasedOn="{StaticResource SwitchToggleButton}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Dark}" />
    </Style>

    <!--  切换开关强调色  -->
    <Style x:Key="SwitchAccentToggleButton"
           BasedOn="{StaticResource SwitchToggleButton}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Accent}" />
    </Style>
</ResourceDictionary>