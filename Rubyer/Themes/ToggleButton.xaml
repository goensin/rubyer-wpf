<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:rubyer="clr-namespace:Rubyer">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Rubyer;component/Themes/BaseStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RubyerToggle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryForeground}"/>
        <Setter Property="Foreground" Value="{DynamicResource Primary}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Primary}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="BorderThickness" Value="1.3"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5 0"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="rubyer:ButtonHelper.CornerRadius" Value="2.5"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" Background="Transparent" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="{Binding Path=(rubyer:ButtonHelper.CornerRadius),RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" TargetName="border" Value="{StaticResource MouseOverOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Opacity" TargetName="border" Value="{StaticResource PressedOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource UnEnabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" 
                                    Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ToggleButton},Path=Foreground}"/>
                            <Setter Property="BorderBrush" TargetName="border" 
                                    Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ToggleButton},Path=Foreground}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" 
                                    Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ToggleButton},Path=Background}"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--亮色-->
    <Style x:Key="LightToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource RubyerToggle}">
        <Setter Property="Background" Value="{DynamicResource LightForeground}"/>
        <Setter Property="Foreground" Value="{DynamicResource Light}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Light}"/>
    </Style>

    <!--暗色-->
    <Style x:Key="DarkToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource RubyerToggle}">
        <Setter Property="Background" Value="{DynamicResource DarkForeground}"/>
        <Setter Property="Foreground" Value="{DynamicResource Dark}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Dark}"/>
    </Style>

    <!--强调色-->
    <Style x:Key="AccentToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource RubyerToggle}">
        <Setter Property="Background" Value="{DynamicResource AccentForeground}"/>
        <Setter Property="Foreground" Value="{DynamicResource Accent}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
    </Style>

    <!--默认圆形开关-->
    <Style x:Key="CircleMidToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource RubyerToggle}">
        <Setter Property="Foreground" Value="{DynamicResource Primary}"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryForeground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Primary}"/>
        <Setter Property="rubyer:ButtonHelper.CircleDima" Value="30"/>
        <Setter Property="Height" 
                Value="{Binding Path=(rubyer:ButtonHelper.CircleDima),RelativeSource={RelativeSource Mode=Self}}"/>
        <Setter Property="Width" 
                Value="{Binding Path=(rubyer:ButtonHelper.CircleDima),RelativeSource={RelativeSource Mode=Self}}"/>
        <Setter Property="rubyer:ButtonHelper.CornerRadius" 
                Value="{Binding Path=(rubyer:ButtonHelper.CircleDima),RelativeSource={RelativeSource Mode=Self},Converter={StaticResource halfTheValue}}"/>
    </Style>

    <!--圆形亮色开关-->
    <Style x:Key="CircleLightToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CircleMidToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource Light}"/>
        <Setter Property="Background" Value="{DynamicResource LightForeground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Light}"/>
    </Style>

    <!--圆形暗色开关-->
    <Style x:Key="CircleDarkToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CircleMidToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource Dark}"/>
        <Setter Property="Background" Value="{DynamicResource DarkForeground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Dark}"/>
    </Style>

    <!--圆形强调色开关-->
    <Style x:Key="CircleAccentToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CircleMidToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource Accent}"/>
        <Setter Property="Background" Value="{DynamicResource AccentForeground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Accent}"/>
    </Style>

    <!--切换开关默认-->
    <Style x:Key="SwitchMidToggle" TargetType="{x:Type ToggleButton}">
        <Setter Property="rubyer:ToggleButtonHelper.CheckedBackground" Value="{DynamicResource Primary}"/>
        <Setter Property="Background" Value="{DynamicResource BorderGray}"/>
        <Setter Property="Foreground" Value="{DynamicResource DefaultForeground}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderGray}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Margin" Value="-1"/>
        <Setter Property="Padding" Value="-1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="border" Background="{TemplateBinding Background}"  Grid.Column="1"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="{Binding Height,Converter={StaticResource halfTheValue},RelativeSource={RelativeSource Mode=Self}}"
                            SnapsToDevicePixels="true" Margin="{TemplateBinding Padding}"
                            Height="15" Width="26">
                            <Canvas>
                                <Ellipse x:Name="littleBall"
                                         Fill="{DynamicResource DefaultBackground}" 
                                         Height="{Binding RelativeSource={RelativeSource Mode=Self},Path=Width}"
                                         Canvas.Right="11" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                         Effect="{StaticResource AllDirectionEffect}">
                                    <Ellipse.Width>
                                        <MultiBinding Converter="{StaticResource getWidth}">
                                            <Binding ElementName="border" Path="Height"/>
                                            <Binding ElementName="border" Path="BorderThickness.Left"/>
                                        </MultiBinding>
                                    </Ellipse.Width>
                                </Ellipse>
                            </Canvas>
                        </Border>
                        <Grid Grid.Column="0" Margin="5 0">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" TargetName="border" Value="{StaticResource MouseOverOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Opacity" TargetName="border" Value="{StaticResource PressedOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource UnEnabledOpacity}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" 
                                    Value="{Binding Path=(rubyer:ToggleButtonHelper.CheckedBackground),RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter Property="BorderBrush" TargetName="border" 
                                     Value="{Binding Path=(rubyer:ToggleButtonHelper.CheckedBackground),RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="littleBall" Storyboard.TargetProperty="(Canvas.Right)"
                                                         To="0" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="littleBall" Storyboard.TargetProperty="(Canvas.Right)"
                                                         To="11" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--切换开关亮色-->
    <Style x:Key="SwitchLightToggle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource SwitchMidToggle}">
        <Setter Property="rubyer:ToggleButtonHelper.CheckedBackground" Value="{DynamicResource Light}"/>
    </Style>

    <!--切换开关暗色-->
    <Style x:Key="SwitchDarkToggle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource SwitchMidToggle}">
        <Setter Property="rubyer:ToggleButtonHelper.CheckedBackground" Value="{DynamicResource Dark}"/>
    </Style>

    <!--切换开关强调色-->
    <Style x:Key="SwitchAccentToggle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource SwitchMidToggle}">
        <Setter Property="rubyer:ToggleButtonHelper.CheckedBackground" Value="{DynamicResource Accent}"/>
    </Style>

</ResourceDictionary>