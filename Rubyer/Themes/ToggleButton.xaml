<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:rubyer="clr-namespace:Rubyer">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Rubyer;component/Themes/BaseStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                               SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RubyerToggle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource Primary}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Primary}" />
        <Setter Property="BorderThickness" Value="1.5" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteForeground}" />
        <Setter Property="Height" Value="28" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5 0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="rubyer:ButtonHelper.CornerRadius" Value="{StaticResource AllControlCornerRadius}" />
        <Setter Property="rubyer:ButtonHelper.CircleDiameter" Value="28" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border x:Name="maskBorder"
                                Background="{TemplateBinding Background}"
                                CornerRadius="{Binding Path=(rubyer:ButtonHelper.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                RenderTransformOrigin="0.5,0.5"
                                SnapsToDevicePixels="true">
                            <Border.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0" ScaleY="0" />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Border.RenderTransform>
                        </Border>
                        <Border x:Name="border"
                                Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding Path=(rubyer:ButtonHelper.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Focusable="False"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>

                        <rubyer:ControlMask CornerRadius="{Binding Path=(rubyer:ControlHelper.CornerRadius), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource UnenableOpcity}" />
                        </Trigger>
                        <Trigger Property="rubyer:ButtonHelper.Shape" Value="Circle">
                            <Setter Property="Width" Value="{Binding Path=(rubyer:ButtonHelper.CircleDiameter), RelativeSource={RelativeSource Self}}" />
                            <Setter Property="Height" Value="{Binding Path=(rubyer:ButtonHelper.CircleDiameter), RelativeSource={RelativeSource Self}}" />
                            <Setter Property="rubyer:ControlHelper.CornerRadius" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource HalfOfDoubleConverter}}" />
                            <Setter Property="Padding" Value="0" />
                        </Trigger>
                        <Trigger Property="rubyer:ButtonHelper.Shape" Value="Round">
                            <Setter Property="rubyer:ControlHelper.CornerRadius" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Converter={StaticResource HalfOfDoubleConverter}}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="maskBorder"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                         To="1"
                                                         Duration="0:0:0.18">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="maskBorder"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                         To="1"
                                                         Duration="0:0:0.18">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="maskBorder"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                         To="0"
                                                         Duration="0:0:0.18">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseIn" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="maskBorder"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                         To="0"
                                                         Duration="0:0:0.18">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseIn" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Foreground" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Foreground" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  亮色  -->
    <Style x:Key="LightToggleButton"
           BasedOn="{StaticResource RubyerToggle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource Light}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Light}" />
        <Setter Property="Foreground" Value="{DynamicResource BlackForeground}" />
    </Style>

    <!--  暗色  -->
    <Style x:Key="DarkToggleButton"
           BasedOn="{StaticResource RubyerToggle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource Dark}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Dark}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteForeground}" />
    </Style>

    <!--  强调色  -->
    <Style x:Key="AccentToggleButton"
           BasedOn="{StaticResource RubyerToggle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource Accent}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteForeground}" />
    </Style>

    <!--  默认圆形开关  -->
    <Style x:Key="CircleToggleButton"
           BasedOn="{StaticResource RubyerToggle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource Primary}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteForeground}" />
        <Setter Property="rubyer:ButtonHelper.Shape" Value="Circle" />
    </Style>

    <!--  圆形亮色开关  -->
    <Style x:Key="CircleLightToggleButton"
           BasedOn="{StaticResource CircleToggleButton}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource Light}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Light}" />
        <Setter Property="Foreground" Value="{DynamicResource BlackForeground}" />
    </Style>

    <!--  圆形暗色开关  -->
    <Style x:Key="CircleDarkToggleButton"
           BasedOn="{StaticResource CircleToggleButton}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource Dark}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Dark}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteForeground}" />
    </Style>

    <!--  圆形强调色开关  -->
    <Style x:Key="CircleAccentToggleButton"
           BasedOn="{StaticResource CircleToggleButton}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource Accent}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteForeground}" />
    </Style>

    <!--  切换开关默认  -->
    <Style x:Key="SwitchToggle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource Border}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource DefaultForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Primary}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Grid x:Name="backgroundRoot"
                              Grid.Column="1"
                              Width="26"
                              Height="15"
                              Margin="2 1">
                            <Border x:Name="defaultBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding ActualHeight, Converter={StaticResource HalfOfDoubleConverter}, RelativeSource={RelativeSource Mode=Self}}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <Border x:Name="checkedBorder"
                                    Background="{Binding Path=(rubyer:ControlHelper.FocusedBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding ActualHeight, Converter={StaticResource HalfOfDoubleConverter}, RelativeSource={RelativeSource Mode=Self}}"
                                    Opacity="0"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <Canvas>
                                <Ellipse x:Name="littleBall"
                                         Canvas.Right="11"
                                         Width="15"
                                         Height="{Binding ActualWidth, RelativeSource={RelativeSource Mode=Self}}"
                                         Effect="{StaticResource AllDirectionEffect}"
                                         Fill="{DynamicResource WhiteForeground}"/>
                            </Canvas>
                        </Grid>

                        <Grid Grid.Column="0" Margin="0 0 5 0">
                            <ContentPresenter x:Name="contentPresenter"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Focusable="False"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" SourceName="backgroundRoot" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="littleBall"
                                                         Storyboard.TargetProperty="Effect.BlurRadius"
                                                         To="10"
                                                         Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="littleBall"
                                                         Storyboard.TargetProperty="Effect.BlurRadius"
                                                         Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="littleBall"
                                                         Storyboard.TargetProperty="Effect.BlurRadius"
                                                         To="2"
                                                         Duration="0:0:0.15">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="littleBall"
                                                         Storyboard.TargetProperty="Effect.BlurRadius"
                                                         Duration="0:0:0.15">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseIn" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource UnenableOpcity}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="checkedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.25"/>
                                        <DoubleAnimation Storyboard.TargetName="littleBall"
                                                         Storyboard.TargetProperty="(Canvas.Right)"
                                                         To="-1"
                                                         Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="checkedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Duration="0:0:0.25"/>
                                        <DoubleAnimation Storyboard.TargetName="littleBall"
                                                         Storyboard.TargetProperty="(Canvas.Right)"
                                                         Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  切换开关亮色  -->
    <Style x:Key="SwitchLightToggle"
           BasedOn="{StaticResource SwitchToggle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Light}" />
    </Style>

    <!--  切换开关暗色  -->
    <Style x:Key="SwitchDarkToggle"
           BasedOn="{StaticResource SwitchToggle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Dark}" />
    </Style>

    <!--  切换开关强调色  -->
    <Style x:Key="SwitchAccentToggle"
           BasedOn="{StaticResource SwitchToggle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="rubyer:ControlHelper.FocusedBrush" Value="{DynamicResource Accent}" />
    </Style>

</ResourceDictionary>